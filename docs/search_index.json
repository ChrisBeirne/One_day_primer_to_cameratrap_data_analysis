[["composition.html", "Chapter 8 Community composition 8.1 Observed richness 8.2 Estimated richness 8.3 Basic results plot 8.4 Sampling-unit-based accumulation curves 8.5 Other diversity metrics 8.6 Community structure", " Chapter 8 Community composition By Christopher Beirne and Laura Stewart One of the most fundamental questions researchers and practitioners want to answer is how many species are there in my survey area?. Exploring patterns in species richness can also tell us if we have performed ‘enough’ surveying. Create a new .R script Call it 04_example_richness.R. Load the required packages # Check you have them and load them list.of.packages &lt;- c(&quot;iNEXT&quot;, &quot;kableExtra&quot;, &quot;tidyr&quot;, &quot;ggplot2&quot;, &quot;gridExtra&quot;, &quot;dplyr&quot;, &quot;viridis&quot;) new.packages &lt;- list.of.packages[!(list.of.packages %in% installed.packages()[,&quot;Package&quot;])] if(length(new.packages)) install.packages(new.packages) lapply(list.of.packages, require, character.only = TRUE) 8.1 Observed richness The simplest way to quantify species richness is counting the number of species you detect on your camera traps - ‘observed richness’. This is very easy to determine using our species list: sp_summary &lt;- read.csv(&quot;data/processed_data/AlgarRestorationProject_species_list.csv&quot;, header=T) # Use nrow() to count the number of species nrow(sp_summary) ## [1] 14 In the case of the example data set, this represents 14 mammal species. class order family genus species common_name sp mass_g act_noct act_crep act_diur Mammalia Artiodactyla Cervidae Alces alces moose Alces.alces 356998.16 1 1 0 Mammalia Artiodactyla Cervidae Cervus canadensis elk Cervus.canadensis 165015.85 1 1 0 Mammalia Artiodactyla Cervidae Odocoileus virginianus NA Odocoileus.virginianus 55508.56 1 1 0 Mammalia Artiodactyla Cervidae Rangifer tarandus caribou Rangifer.tarandus 86033.98 0 0 1 Mammalia Carnivora Canidae Canis latrans coyote Canis.latrans 13406.33 1 1 0 Mammalia Carnivora Canidae Canis lupus gray wolf Canis.lupus 32183.33 1 1 0 Mammalia Carnivora Canidae Vulpes vulpes red fox Vulpes.vulpes 5476.17 1 1 0 Mammalia Carnivora Felidae Lynx canadensis canada lynx Lynx.canadensis 9373.25 1 0 0 Mammalia Carnivora Mustelidae Lontra canadensis northern american river otter Lontra.canadensis 8087.42 1 1 0 Mammalia Carnivora Mustelidae Martes americana american marten Martes.americana 1250.00 1 0 0 Mammalia Carnivora Ursidae Ursus americanus american black bear Ursus.americanus 99949.36 1 0 0 Mammalia Lagomorpha Leporidae Lepus americanus snowshoe hare Lepus.americanus 1710.02 1 0 0 Mammalia Lagomorpha Leporidae Oryctolagus cuniculus rabbit Oryctolagus.cuniculus 1832.22 1 0 0 Mammalia Rodentia Sciuridae Tamiasciurus hudsonicus american red squirrel Tamiasciurus.hudsonicus 201.17 0 0 1 It is possible to compare observed richness across different strata of interest, however survey effort must be identical between your comparison strata. This very rarely the case in camera trap studies where cameras break, run out of battery or are deployed for different lengths of time. The number of species you detect is a function of the amount of effort you spent surveying/the number of individuals detected - the longer a camera is active/the more individuals detected, the more species it will detect. What this means is, unless you saturate a landscape with camera traps, observed richness will underestimate true richness. Consequently, We need ways of comparing species richness which accounts in some way for survey effort. 8.2 Estimated richness There are two commonly used ways to account for survey effort when estimating species richness using camera traps: using the incidence of rare species to ‘correct’ observed richness (iNext) using multispecies occupancy models to account for the species present but not observed (occupancy model) 8.2.1 iNext package The iNext package (INterpolation and EXTrapolation of species richness) - is both easy to use and rapid to compute. It also comes with a wealth of plotting functions - see the iNext Quick Introduction for a great walk through tutorial. Its core functionality is based on: Chao, Anne, et al. “Rarefaction and extrapolation with Hill numbers: a framework for sampling and estimation in species diversity studies.” Ecological monographs 84.1 (2014): 45-67. Which has, to date, been cited &gt;2000 times! To run this example code you will need to load the iNEXT , ggplot2, and gridExtra packages. library(iNEXT); library(ggplot2); library(gridExtra) Single strata You may want to see if your camera project has sufficient survey effort to capture the species within the area of interest. To do this we can compute a species accumulation curves across the site as a whole. Species accumulation curves plot the increase in species richness as we add individuals or survey units. If the curve plateaus (flattens), then that suggests you have sampled the majority of the species in your survey area. Data formatting Applying the iNEXT functions to camera trap data is perhaps simplest using ‘abundance’ function, this represents the frequency with which each species is detected. The abundance data model requires a string of abundance frequencies contained within a list. We can create this format from the ...total_observations dataset: # Import the total observations dataset total_obs &lt;- read.csv(&quot;data/processed_data/AlgarRestorationProject_30min_independent_total_observations.csv&quot;, header=T) # Make an empty list to store our data project_level &lt;- list() # Sum all of the observations of each species (colSums), and then make it an element within the project_level list project_level[[1]]&lt;- colSums(total_obs[, sp_summary$sp]) # Give it a name names(project_level) &lt;- &quot;project_level&quot; This produces a list object which looks like this: ## $project_level ## Alces.alces Cervus.canadensis Odocoileus.virginianus ## 176 1 562 ## Rangifer.tarandus Canis.latrans Canis.lupus ## 119 8 93 ## Vulpes.vulpes Lynx.canadensis Lontra.canadensis ## 10 52 1 ## Martes.americana Ursus.americanus Lepus.americanus ## 24 228 241 ## Oryctolagus.cuniculus Tamiasciurus.hudsonicus ## 2 26 Analysis Once you have created your list, we can run a basic iNEXT analysis and create a graphs of the results. Below we show a basic iNEXT call with some of its default arguments. out &lt;- iNEXT(project_level, # The data frame q=0, # The type of diversity estimator (see discussion of the options below) datatype=&quot;abundance&quot;, # The type of analysis knots=40, # The number of data points in your line (more = smoother) se=TRUE, # Logical statement if you want confidence intervals conf=0.95, # The level of confidence intervals nboot=50) # The number of replications to perform - this generates your confidence interval - the bigger the number the longer the run time a note on q values The iNEXT package uses the concept of hill numbers to calculate its community indices. The q values reflect traditional diversity estimators: 0 = species richness 1 = Shannon diversity 2 = Simpson diversity They differ in the weighting of rare species. 0 treats the ‘value’ of every species equally, rare or common. As the the q value increases, the influence of rare species becomes weaker and weaker. a note on coverage Whilst many users will be familiar with diversity indices, iNEXT also calculates ‘sample coverage’ - the proportion of the total number of individuals that belong to the species detected in the sample. The way to conceptualize this is - if you add an un-surveyed individual to the surveyed population, what is the likelihood it belongs to the species not already detected? If your sample coverage is high, this probability will be very low! We will start with observed richness. The iNEXT() function returns the “iNEXT” object including three output lists: - $DataInfo for summarizing data information - $iNextEst for showing size- and coverage-based diversity estimates along with related statistics for a series of rarefied and extrapolated samples - $AsyEst for showing asymptotic diversity estimates along with related statistics. out Lets check out each one in turn: $DataInfo is shown below, returns summary data such as the reference sample size (n), observed species richness (S.obs - which is hopefully the same as what we calculated above), sample coverage estimate for the reference sample (SC), and the first ten frequency counts (f1‐f10). $iNextEst output includes two data frames: $size_based and $coverage_based. Let’s first look at $iNextEst$size_based: Next $iNextEst$coverage_based: $AsyEst gives the asymptotic estimates and their related statistics. One of the powerful elements of iNEXT is that it can extrapolate beyond your data, this is very useful when you do not have equal sample sizes. 8.3 Basic results plot p1 &lt;- ggiNEXT(out, type=1)+ theme_classic() # type 1 = the diversity estimator p2 &lt;- ggiNEXT(out, type=2)+ theme_classic() # type 2 = the survey coverage grid.arrange(p1, p2, nrow = 1) At this end of this section we will demonstrate how to create your own plots using the iNEXT output. Multiple strata The iNEXT package gets really interesting when we start to compare multiple different strata. e.g. different treatment types or species groupings. The code to build a multi strata comparison is very similar to that of a single strata, except now you separate the observations into their relevant categories. We will compare the different categories using the feature_type column in the covariate file. We match the ‘placenames’ in our locations dataframe with the corresponding capture data in total_obs using the %in% command. # Read in the locations data frame locs &lt;- read.csv(&quot;data/processed_data/AlgarRestorationProject_camera_locations_and_covariates.csv&quot;) # We first want to create a data subset for each of the strata we are interested in: # The treatment types for each Deployment.Location.ID are in the sta file # Make an object containing all of the site ID&#39;s for the &quot;Offline&quot; cameras off &lt;- locs$placename[locs$feature_type==&quot;Offline&quot;] # And &quot;HumanUse&quot; cameras hum &lt;- locs$placename[locs$feature_type==&quot;HumanUse&quot;] # Create a new empty list strata &lt;- list() # Only sum the data for each relvent strata strata[[1]] &lt;- colSums(total_obs[total_obs$placename %in% off, sp_summary$sp]) strata[[2]] &lt;- colSums(total_obs[total_obs$placename %in% hum, sp_summary$sp]) # Give them names names(strata) &lt;- c(&quot;Offline&quot;, &quot;HumanUse&quot;) Then, as before, run your iNEXT model and examine the output: out &lt;- iNEXT(strata, datatype=&quot;abundance&quot;) p1 &lt;- ggiNEXT(out, type=1)+ theme_classic() p2 &lt;- ggiNEXT(out, type=2)+ theme_classic() grid.arrange(p1, p2, nrow = 1) From the plot on the left you can see that the ‘HumanUse’ strata detected more species than the ‘Offline’ strata. The plot on the right suggests that we have likely sampled all of the species that will be detected within these habitats (samples are ‘complete’). 8.4 Sampling-unit-based accumulation curves The example above is useful, but in camera trap projects we typically do not think about our survey effort in terms of the number of individuals we catch, rather the number of camera stations we deploy on the landscape or the units of time they are active (e.g. camera days). Performing our species accumulation curves using survey location, rather than individuals encountered, allows us to determine if we have enough survey locations in a given strata to detect all of the species present. Repeating the analyses using camera days would also give insight into whether we need for survey effort in a given location. The data formatting for a sampling-unit based accumulation curve is different to that of an individual-based curve. As before we need a list of strata. However, now we need the elements in the list to represent the number of sampling units first, then the number of those units where each given species was detected following it. The example that comes with the iNext package looks like this. The yellow number is the total number of survey units in each location, the red numbers are the number of sites in which each species occurs. 8.4.1 Survey station example Lets build this example for survey stations using our data: # As before we can use out total_obs dataframe. inc_dat &lt;- total_obs %&gt;% mutate(across(sp_summary$sp, ~+as.logical(.x))) # Turn species counts into 0&#39;s and 1&#39;s # Create a new empty list inc_locations &lt;- list() # Only sum the data for each relvent locations inc_locations[[1]] &lt;- c(length(off), # First count the number of stations # Then subset the detections to those stations, sum the columns, and sort the incidents inc_dat[inc_dat$placename %in% off, sp_summary$sp] %&gt;% colSums() %&gt;% sort(decreasing=T)) inc_locations[[2]] &lt;- c(length(hum), # Count the number of stations # Then subset the detections to those stations, sum the columns, and sort the incidents inc_dat[inc_dat$placename %in% hum, sp_summary$sp] %&gt;% colSums() %&gt;% sort(decreasing=T)) # Give them names names(inc_locations) &lt;- c(&quot;Offline&quot;, &quot;HumanUse&quot;) And let’s run our iNext model: out.inc &lt;- iNEXT(inc_locations, q=0, datatype=&quot;incidence_freq&quot;) # Sample‐size‐based R/E curves ggiNEXT(out.inc, type=1, color.var=&quot;Assemblage&quot;) + labs(y=&quot;Richness&quot;, x = &quot;Locations surveyed&quot;) + theme_classic() So it looks like the human use features are more diverse than the offline features. 8.4.2 Sampling duration example If we want to explore the species accumulation patterns as a function of the number of survey nights, we can make use of the ...weekly_observations dataframes. week_obs&lt;- read.csv(&quot;data/processed_data/AlgarRestorationProject_30min_independent_weekly_observations.csv&quot;, header=T) # Turn it into binary incidents inc_dat &lt;- week_obs %&gt;% mutate(across(sp_summary$sp, ~+as.logical(.x))) # Create a new empty list inc_time &lt;- list() # Only sum the data for each relevent strata inc_time[[1]] &lt;- c(nrow(inc_dat[inc_dat$placename %in% off,]), # Count the number of weeks we have data for in each strata # Then subset the detections to those stations, sum the columns, and sort the incidents inc_dat[inc_dat$placename %in% off, sp_summary$sp] %&gt;% colSums() %&gt;% sort(decreasing=T)) inc_time[[2]] &lt;- c(nrow(inc_dat[inc_dat$placename %in% hum,]), # Count the number of stations # Then subset the detections to those stations, sum the columns, and sort the incidents inc_dat[inc_dat$placename %in% hum, sp_summary$sp] %&gt;% colSums() %&gt;% sort(decreasing=T)) # Give them names names(inc_time) &lt;- c(&quot;Offline&quot;, &quot;HumanUse&quot;) And run the model: out.inc &lt;- iNEXT(inc_time, q=0, datatype=&quot;incidence_freq&quot;) ## Warning in Fun(x[[i]], q, names(x)[i]): Insufficient data to provide reliable ## estimators and associated s.e. ## Warning in Fun(x[[i]], q, names(x)[i]): Insufficient data to provide reliable ## estimators and associated s.e. # Sample‐size‐based R/E curves ggiNEXT(out.inc, type=1, color.var=&quot;Assemblage&quot;) + labs(y=&quot;Richness&quot;, x = &quot;Camera days&quot;) + theme_classic() Which suggests the same pattern! 8.4.3 On your own Simple: Repeat the comparison for NetReg and HumanUse feature types. Advanced: Compare the species accumulate curves at the site level for small (&lt;10 kg) and large mammals (&gt;10kg) 8.5 Other diversity metrics 8.5.1 Simpson and Shannon One issue with species richness assessments is that they weight all species equally, thus a community with 12 species all present in equal abundances will give you the same richness value as a high skewed community with one highly abundant species, and 11 very rare ones. Consequently, you might want to estimate species diversity. Luckily, the iNEXT package is well suited for comparisons of diversity indices through the use of hill numbers - of which the ‘q’ value represents the traditional Shannon (q=1) and Simpson (q=2) diversity indices (species richness: q = 0). Note Increasing values of q reduces the influence of rare species on your estimate of community diversity. For example, we might want to compare the species diversity across our two focal strata: # We also introduce the object t -&gt; which reflects the range of values over which you want to predict species richness out &lt;- iNEXT(inc_time, q=c(0,1,2) ,datatype=&quot;incidence_freq&quot; ) ggiNEXT(out, type=1, facet.var=&quot;Order.q&quot;, color.var=&quot;Assemblage&quot;) + theme_classic() The plot above shows that the differences between our two strata remain across increasing q values (suggesting that the different inst just driven by several rarely encountered species). Point estimates and their confidence intervals can also be extracted from iNEXT model objects - but it does require a little data wrangling. For example, if we wanted to directly compare the diversity estimates of our strata at 1000 survey units: # To generate predictions for specific amounts of survey effort, we make use of the variable t # T specifies the values you want iNEXt to calculate diversity for out &lt;- iNEXT(inc_time, q=c(0,1,2) ,datatype=&quot;incidence_freq&quot;, size=c(1000)) # The lapply function applies the same logic across elements in a list point_estimate &lt;- out$iNextEst$size_based[out$iNextEst$size_based$t==1000,] point_estimate ## Assemblage t Method Order.q qD qD.LCL qD.UCL SC ## 1 Offline 1000 Rarefaction 0 9.908397 9.210738 10.606056 0.9941691 ## 5 Offline 1000 Rarefaction 1 5.203867 4.708660 5.699074 0.9941691 ## 9 Offline 1000 Rarefaction 2 3.772972 3.305605 4.240339 0.9941691 ## 13 HumanUse 1000 Rarefaction 0 13.700080 11.894499 15.505662 0.9925555 ## 17 HumanUse 1000 Rarefaction 1 8.529924 7.947498 9.112350 0.9925555 ## 21 HumanUse 1000 Rarefaction 2 7.451187 6.964816 7.937558 0.9925555 ## SC.LCL SC.UCL ## 1 0.9912960 0.9970422 ## 5 0.9912960 0.9970422 ## 9 0.9912960 0.9970422 ## 13 0.9878541 0.9972568 ## 17 0.9878541 0.9972568 ## 21 0.9878541 0.9972568 # Make a nice ggplot! ggplot(point_estimate, aes(x=c(-0.1,0.9, 1.9, 0.1, 1.1, 2.1), y=qD, colour=Assemblage)) + theme_classic() + #scale_x_discrete(breaks=c(&quot;1&quot;,&quot;2&quot;),labels= c(&quot;1&quot;,&quot;2&quot;)) + geom_errorbar(aes(ymin=qD.LCL, ymax=qD.UCL), width=.01) + labs(y=&quot;Diversity&quot;, x = &quot;Diversity at 1000 survey days&quot;) + geom_point() 8.5.2 More examples in the literature Some examples of using iNEXT with camera trap data: Cusack et al. 2015 Random versus Game Trail-Based Camera Trap Placement Strategy for Monitoring Terrestrial Mammal Communities Kays et al. 2020 An empirical evaluation of camera trap study design: How many, how long and when? Semper-Pascual et a. 2018 Mapping extinction debt highlights conservation opportunities for birds and mammals in the South American Chaco Publishing note If you publish your work based on the results from the iNEXT package, you should make references to the following methodology paper (Chao et al. 2014) and the application paper (Hsieh, Ma &amp; Chao, 2016): Chao A, Gotelli NJ, Hsieh TC, Sande EL, Ma KH, Colwell RK, Ellison AM (2014). “Rarefaction and extrapolation with Hill numbers: a framework for sampling and estimation in species diversity studies.” Ecological Monographs, 84, 45–67. Hsieh TC, Ma KH, Chao A (2022). iNEXT: Interpolation and Extrapolation for Species Diversity. R package version 3.0.0, http://chao.stat.nthu.edu.tw/wordpress/software_download/. 8.5.3 Multispecies occupancy model It is also possible to estimate species richness in a given area/strata using multispecies occupancy models. For an example with code in the appendices see: Tobler, M. et al. Spatiotemporal hierarchical modelling of species richness and occupancy using camera trap data. J. Appl. Ecol. (2015). 8.6 Community structure One of the shortfalls in the diversity index approaches is that you can compare two sites with completely different mammal assemblages, but identical diversity estimates! So we would conclude that the two are the same, however,in reality their compositions are totally different. Another way to assess community structure is with ordination methods (e.g non-metric multidimensional scaling or NMDS). For a fantastic (although now somewhat dated) blog on NMDS methods see: Sample(ecology)’s NMDS tutorial in R. Luckily a basic NMDS is very easy to run from our ...total_observations dataframe: #install.packages(&quot;vegan&quot;) library(vegan) # Import your count data total_obs &lt;- read.csv(&quot;data/processed_data/AlgarRestorationProject_30min_independent_total_observations.csv&quot;, header=T) #Import the location and covariate data locs &lt;- read.csv(&quot;data/processed_data/AlgarRestorationProject_camera_locations_and_covariates.csv&quot;) # Add the covariates to your total_obs dataframe dat &lt;- left_join(total_obs, locs) # To keep things simple, we will subset to HumanUse and Offline (as above) dat &lt;- dat[dat$feature_type %in% c(&quot;HumanUse&quot;, &quot;Offline&quot;),] # Convert to categorical factors dat &lt;- dat %&gt;% mutate_if(is.character,as.factor) # Subset to just the count columns counts &lt;- dat[,sp_summary$sp] # Covert it into a matrix m_counts &lt;- as.matrix(counts) We are now ready to run our NMDS model: set.seed(123) # To make sure we all get the same result # run metaMDS on the count matrix using the &quot; Bray-Curtis dissimilarity&quot; note others are available nmds = metaMDS(m_counts, # The count matrix distance = &quot;bray&quot;, # The method of solving trace=0) # Supress the output - trace=1 is more informative And check the output: nmds ## ## Call: ## metaMDS(comm = m_counts, distance = &quot;bray&quot;, trace = 0) ## ## global Multidimensional Scaling using monoMDS ## ## Data: wisconsin(sqrt(m_counts)) ## Distance: bray ## ## Dimensions: 2 ## Stress: 0.2166573 ## Stress type 1, weak ties ## Best solution was not repeated after 20 tries ## The best solution was from try 17 (random start) ## Scaling: centring, PC rotation, halfchange scaling ## Species: expanded scores based on &#39;wisconsin(sqrt(m_counts))&#39; 8.6.1 Extracting data for plotting To make a nice plot of the NMDS data we need to learn how to extract the data from it: # Make a dataframe out of the x and Y scores site.scores &lt;- as.data.frame(scores(nmds)$sites) species.scores &lt;- as.data.frame(scores(nmds)$species) # Add in the covariate data #add covariate columns to data frame site.scores$placename &lt;- dat$placename site.scores$feature_type &lt;- dat$feature_type # Assign colors to our feature_types using viridis # then use the turbo() function to assign each level a color col.cat &lt;- cividis(length(levels(dat$feature_type))) # then we apply it to the dataframe dat$colours &lt;- col.cat[dat$feature_type] Lets make a plot in base R using the default plotting functions: par(mfrow=c(1,1)) # Make an empty plot type=&quot;n ordiplot(nmds,type=&quot;n&quot;, las=1, xlim=c(-1.5,1.2)) # Add an elipse corresponding to each site ordiellipse(nmds, groups=dat$feature_type, col=col.cat, lwd=2) # Add the species loadings orditorp(nmds,display=&quot;species&quot;,col=&quot;red&quot;,air=0.5) # Add the site loadings points(site.scores$NMDS1, site.scores$NMDS2, col=dat$colours, pch=19) # Add a legend legend(&quot;topleft&quot;, levels(dat$feature_type), col=col.cat, pch=19 ) The different feature_types to not differ majorly in their species compositions - there is a huge degree of overlap between sites. The NMDS framework is flexible - we can also add environmental covariates using envfit to explain differences we might find. Checkout a great blog on this by Jackie Zorz for more information! 8.6.2 On your own Repeat the comparison for NetReg and HumanUse feature types. 8.6.3 Examples in the literature Haysom, J. K., Deere, N. J., Wearn, O. R., Mahyudin, A., Jami, J. B., Reynolds, G., &amp; Struebig, M. J. (2021). Life in the Canopy: Using Camera-Traps to Inventory Arboreal Rainforest Mammals in Borneo. Frontiers in Forests and Global Change, 83 Note - they also use iNext! Give that paper a look! "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
